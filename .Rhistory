denominador1 = 0
denominador2 = 0
mean(v1)
mean(v2)
v1[0]-mean(v1)
v1[1]-mean(v1)
mean(v2)
v1[1]-mean(v1)
v1[2]-mean(v1)
v1[3]-mean(v1)
v1[4]-mean(v1)
v1[5]-mean(v1)
v1[6]-mean(v1)
numero_elementos <- readline("Ingresa el numero de elementos: ");
vectorizar <- function(n) seq(from = 0, to = n)
v1 = vectorizar(as.integer(numero_elementos))
v2 = v1**2
prob1 = 1 - pnorm(v1, mean =0, sd = 2) #numeratore
print(prob1)
vectorizar <- function(n) seq(from = 1, to = n)
v1 = vectorizar(as.integer(numero_elementos))
v2 = v1**2
prob1 = 1 - pnorm(v1, mean =0, sd = 2) #numeratore
print(prob1)
prob2 = pchisq(v2, df =6) #k are the degree of freedom
print(prob2)
b <- min(c(prob1,prob2))
c <- max(c(prob1,prob2))
ax <- pretty(b:c, n = 12)
hgA <- hist(prob1,  plot = FALSE)
hgB <- hist(prob2,  plot = FALSE)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lg.pink")
plot(hgA, col = c1)
plot(hgB, col = c2, add = TRUE)
i = 0
numerador = 0
denominador1 = 0
denominador2 = 0
mean(v1)
mean(v2)
v1[1]-mean(v1)
v1[2]-mean(v1)
v1[3]-mean(v1)
v1[4]-mean(v1)
v1[5]-mean(v1)
v1[6]-mean(v1)
while(i<numero_elementos) {
numerador <- numerador + (v1[i] - mean(v1)) * (v2[i]-mean(v2))
denominador1 <- denominador1 + (v1[i] - mean(v1))**2
denominador2 <- denominador2 + (v2[i] - mean(v2)) ** 2
i<- i+1
}
r <- numerador/sqrt(denominador1*denominador2)
r
v1 = c(23,2,12,45,32,99)
v2 = v1**2
prob1 = 1 - pnorm(v1, mean =0, sd = 2) #numeratore
print(prob1)
prob2 = pchisq(v2, df =6) #k are the degree of freedom
print(prob2)
b <- min(c(prob1,prob2))
c <- max(c(prob1,prob2))
ax <- pretty(b:c, n = 12)
hgA <- hist(prob1,  plot = FALSE)
hgB <- hist(prob2,  plot = FALSE)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lg.pink")
plot(hgA, col = c1)
plot(hgB, col = c2, add = TRUE)
i = 0
numerador = 0
denominador1 = 0
denominador2 = 0
mean(v1)
mean(v2)
v1[1]-mean(v1)
v1[2]-mean(v1)
v1[3]-mean(v1)
v1[4]-mean(v1)
v1[5]-mean(v1)
v1[6]-mean(v1)
while(i<numero_elementos) {
numerador <- numerador + (v1[i] - mean(v1)) * (v2[i]-mean(v2))
denominador1 <- denominador1 + (v1[i] - mean(v1))**2
denominador2 <- denominador2 + (v2[i] - mean(v2)) ** 2
i<- i+1
}
r <- numerador/sqrt(denominador1*denominador2)
r
r <- numerador/sqrt(denominador1*denominador2)
numerador
denominador1
denominador2
v1[i] - mean(v1)
v1[1]-mean(v1)
v1[2]-mean(v1)
v1[3]-mean(v1)
v1[4]-mean(v1)
v1[5]-mean(v1)
v1[6]-mean(v1)
denominador1 <- c(denominador1,(v1[i] - mean(v1))**2)
while(i<numero_elementos) {
numerador <- numerador + (v1[i] - mean(v1)) * (v2[i]-mean(v2))
denominador1 <- c(denominador1,(v1[i] - mean(v1))**2)
denominador2 <- denominador2 + (v2[i] - mean(v2)) ** 2
i<- i+1
}
while(i<numero_elementos) {
numerador <- numerador + (v1[i] - mean(v1)) * (v2[i]-mean(v2))
denominador1 <- c(denominador1,(v1[i] - mean(v1))**2)
denominador2 <- c(denominador2,(v2[i] - mean(v2)) ** 2)
i<- i+1
}
while(i<numero_elementos) {
numerador <- numerador + (v1[i] - mean(v1)) * (v2[i]-mean(v2))
denominador1 <- c(denominador1,(v1[i] - mean(v1))**2)
denominador2 <- c(denominador2,(v2[i] - mean(v2)) ** 2)
i<- i+1
}
while(i<v1.length) {
numerador <- numerador + (v1[i] - mean(v1)) * (v2[i]-mean(v2))
denominador1 <- c(denominador1,(v1[i] - mean(v1))**2)
denominador2 <- c(denominador2,(v2[i] - mean(v2)) ** 2)
i<- i+1
}
while(i<v1.size) {
numerador <- numerador + (v1[i] - mean(v1)) * (v2[i]-mean(v2))
denominador1 <- c(denominador1,(v1[i] - mean(v1))**2)
denominador2 <- c(denominador2,(v2[i] - mean(v2)) ** 2)
i<- i+1
}
v1.size
v1.lentgh
v1.lentgh()
v1.size()
length(v1)
while(i<length(v1)) {
numerador <- numerador + (v1[i] - mean(v1)) * (v2[i]-mean(v2))
denominador1 <- c(denominador1,(v1[i] - mean(v1))**2)
denominador2 <- c(denominador2,(v2[i] - mean(v2)) ** 2)
i<- i+1
}
v1 = c(23,2,12,45,32,99)
v2 = v1**2
prob1 = 1 - pnorm(v1, mean =0, sd = 2) #numeratore
print(prob1)
prob2 = pchisq(v2, df =6) #k are the degree of freedom
print(prob2)
b <- min(c(prob1,prob2))
c <- max(c(prob1,prob2))
ax <- pretty(b:c, n = 12)
hgA <- hist(prob1,  plot = FALSE)
hgB <- hist(prob2,  plot = FALSE)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lg.pink")
plot(hgA, col = c1)
plot(hgB, col = c2, add = TRUE)
i = 0
numerador = 0
denominador1 = 0
denominador2 = 0
mean(v1)
mean(v2)
v1[1]-mean(v1)
v1[2]-mean(v1)
v1[3]-mean(v1)
v1[4]-mean(v1)
v1[5]-mean(v1)
v1[6]-mean(v1)
length(v1)
while(i<length(v1)) {
numerador <- numerador + (v1[i] - mean(v1)) * (v2[i]-mean(v2))
denominador1 <- c(denominador1,(v1[i] - mean(v1))**2)
denominador2 <- c(denominador2,(v2[i] - mean(v2)) ** 2)
i<- i+1
}
r <- numerador/sqrt(denominador1*denominador2)
numerador <- c(numerador, (v1[i] - mean(v1)) * (v2[i]-mean(v2)))
while(i<length(v1)) {
numerador <- c(numerador, (v1[i] - mean(v1)) * (v2[i]-mean(v2)))
denominador1 <- c(denominador1,(v1[i] - mean(v1))**2)
denominador2 <- c(denominador2,(v2[i] - mean(v2)) ** 2)
i<- i+1
}
r <- numerador/sqrt(denominador1*denominador2)
r
plot(x=v1,y=v2,)
plot(x=v1,y=v2,main="scatter plot")
plot(x=v1,y=v2,main="scatter plot", xlab="X", ylab="Y")
#2.13
vector_random = runif(n=100, min=0.5, max=3.4)
mean(vector_random)
var(vector_random)
sd <- sd(vector_random) #variance of random vector
sd
#2.13
vector_random = runif(n=100, min=0.5, max=3.4) #random vector of 100 elements between 0.5 and 3.4
m <- mean(vector_random) #mean of random vector
m
v <- var(vector_random) #variance of random vector
v
sd <- sd(vector_random) #variance of random vector
sd
#dont know 3 point
pnorm(vector_random, mean = m, sd =sd)
#dont know 3 point
1.7 - pnorm(vector_random, mean = m, sd =sd)
#dont know 3 point
1.7 - pnorm(vector_random, mean = m, sd =sd)
#dont know 3 point
pnorm <- pnorm(vector_random, mean = m, sd =sd)
mean(pnorm)
1.7 - mean(pnorm)
1 - mean(pnorm)
#dont know 3 point
pnorm <- pnorm(mean(vector_random), mean = m, sd =sd)
pnorm
#dont know 3 point
pnorm <- pnorm(1.7, mean = m, sd =sd)
pnorm
1/(vector_random+1)
u<-1/(vector_random+1)
hist(vector_random)
hist(u)
set.seed(42)
library(random)
stri_rand_strings
rawToChar(as.raw(sample(c(65:90,97:122), 5, replace=T)))
rawToChar(as.raw(sample(c(65:90,97:122), 5, replace=T)))
runif(n=100, min='aaaaa', max='zzzzz')
rawToChar(as.raw(sample(c(65:90,97:122), 5, replace=T)))
rawToChar(as.raw(sample(c(65:90,97:122), 5, replace=T)))
v <- 0
while(i<=10000) {
v<- c(v,rawToChar(as.raw(sample(c(65:90,97:122), 5, replace=T))))
i++
}
v <- ""
while(i<=10000) {
v<- c(v,rawToChar(as.raw(sample(c(65:90,97:122), 5, replace=T))))
i<-i+1
}
i<- 0
v <- ""
while(i<=10000) {
v<- c(v,rawToChar(as.raw(sample(c(65:90,97:122), 5, replace=T))))
i<-i+1
}
v[55]
v <- ""
while(i<=10000) {
v<- c(v,rawToChar(as.raw(sample(c(65:90), 5, replace=T))))
i<-i+1
}
v
set.seed(42)
i<- 0
v <- ""
while(i<=10000) {
v<- c(v,rawToChar(as.raw(sample(c(65:90), 5, replace=T))))
i<-i+1
}
v
v <- ""
while(i<=10000) {
v<- c(v,rawToChar(as.raw(sample(c(97:122), 5, replace=T))))
i<-i+1
}
v[22]
v
i<- 0
v <- ""
while(i<=10000) {
v<- c(v,rawToChar(as.raw(sample(c(97:122), 5, replace=T))))
i<-i+1
}
v
b = 'nn'
grepl(b, a)
grepl(b, v)
tgrepl(b, v)
tgrepl(b, v)
set.seed(42)
i<- 0
v <- ""
while(i<=10000) {
v<- c(v,rawToChar(as.raw(sample(c(97:122), 5, replace=T))))
i<-i+1
}
p<-0
b = 'nn'
tgrepl(b, v)
i<- 0
v <- ""
while(i<=10000) {
v<- c(v,rawToChar(as.raw(sample(c(97:122), 5, replace=T))))
i<-i+1
}
p<-0
b = 'nn'
tgrepl(b, v)
grepl(b, v)
mean(b)
c<-grepl(b, v)
mean(c)
sd <- sd(c)
norm(media, sd)
media <- mean(c)
sd <- sd(c)
norm(media, sd)
pnorm(media, sd)
norm(media, sd) #calcula la probabilidad
pÂ¿norm(media, sd) #calcula la probabilidad
pnorm(media, sd) #calcula la probabilidad
shiny::runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
cls
clear
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
.libPaths()
shiny::runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
nombresPaises <- Encoding(c("Todos",unique(df$Pais)))
nombresPaises <- c("Todos",unique(df$Pais))
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
nombresPaises<-Encoding(nombresPaises) <- "latin1"
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
Encoding(x) <- nombresPaises
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
runApp('C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day')
(unique(df$Pais))
load("df.RData")
(unique(df$Pais))
load("df.RData")
setwd("~/")
load("df.RData")
nombresPaises <- leeDatos(df)
(unique(df$Pais))
unique(df$Pais)
df
df
load("df.RData")
setwd("C:/Users/RafaelJimenezOrozco/Desktop/Prototype_Day/Prototype_Day")
load("df.RData")
str(unique(df$Pais))
df$Pais
paises<-unique(df$Pais))
paises<-unique(df$Pais)
data.frame(paises)
data.frame(paises)
paises<-data.frame(unique(df$Pais))
View(paises)
View(paises)
runApp()
nombresPaises <- c("Todos",unique(df$Pais))
nombresPaises <- data.frame(c("Todos",unique(df$Pais)))
runApp()
View(nombresPaises)
nombresPaises <- c("Todos",unique(df$Pais))
runApp()
nombresPaises <- c("Todos",unique(str(df$Pais)))
runApp()
paises<-str(df$Pais))
paises<-str(df$Pais)
paises<-unique(str(df$Pais))
paises<-unique(str(df$Pais))
paises<-unique(str(df$Pais))
paises
paises<-unique(df$Pais)
paises
iconv(paises, "latin1", "UTF-8")
paises
runApp()
runApp()
runApp()
runApp()
load("df.RData")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("Jp_map.Rdata")
runApp()
runApp()
runApp()
runApp()
df[df$Periodo>as.Date(paste(2017, 1, 1, sep = "-")) & df$Periodo<as.Date(paste(2018, 12, 31, sep = "-")),]
df[,df$Periodo>as.Date(paste(2017, 1, 1, sep = "-")) & df$Periodo<as.Date(paste(2018, 12, 31, sep = "-"))]
df[df$Periodo<as.Date(paste(2017, 1, 1, sep = "-")) & df$Periodo>as.Date(paste(2018, 12, 31, sep = "-")),]
load("df.RData")
load("Jp_map.Rdata")
load("Jp_map.Rdata")
df <- df %>%
mutate(Periodo = as.Date(df$Periodo))
load("Jp_map.Rdata")
df <- df %>%
mutate(Periodo = as.Date(df$Periodo, "%d/%m/%y"))
df[df$Periodo<as.Date(paste(2017, 1, 1, sep = "-")) & df$Periodo>as.Date(paste(2018, 12, 31, sep = "-")),]
df[df$Periodo>as.Date(paste(2017, 1, 1, sep = "-")) & df$Periodo<as.Date(paste(2018, 12, 31, sep = "-")),]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("Jp_map.Rdata")
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- df %>%
mutate(Periodo = as.Date(df$Periodo, "%d/%m/%y"))
filter(df,Periodo>as.Date(paste(min(2017), 1, 1, sep = "-")))
filter(df,Periodo<as.Date(paste(max(2020), 3, 31, sep = "-")))
df%>%distinct(Pais, latitud, longitud)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
inicio_covid<- strptime('2020-01-23',format='%Y-%m-%d')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("Jp_map.Rdata")
olimpiadas_date <- as.Date('2021-07-23')
# Find the nearest date in the dataset to the Olympics date
nearest_index <- which.min(abs(time(japan_timeseries) - as.numeric(as.Date(olimpiadas_date))))
japan_timeseries <- ts(df$Visitantes,start=c(2017,1),end=c(2023,12),frequency=12)
# Find the nearest date in the dataset to the Olympics date
nearest_index <- which.min(abs(time(japan_timeseries) - as.numeric(as.Date(olimpiadas_date))))
# Adding line for the nearest date to Olympics found in the dataset
abline(v = time(japan_timeseries)[nearest_index], lwd = 2, col = 'blue')
legend("topright", legend = c("COVID-19 Start", "Olimpiadas"), lty = 1, col = c("red", "blue"))
japan_timeseries
time(japan_timeseries)
time(japan_timeseries) - as.numeric(as.Date(olimpiadas_date))
abs(time(japan_timeseries) - as.numeric(as.Date(olimpiadas_date)))
which.min(abs(time(japan_timeseries) - as.numeric(as.Date(olimpiadas_date))))
# Find the nearest date in the dataset to the Olympics date
nearest_index <- which.min(abs(time(japan_timeseries) - as.numeric(as.Date(olimpiadas_date))))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("Jp_map.Rdata")
View(df)
View(df)
runApp()
japan_timeseries <- ts(df$Visitantes,start=c(2017,1),end=c(2023,12),frequency=12)
japan_timeseries
runApp()
plot(japan_timeseries, main=paste("PAIS: ",pais),xlab="Fecha", ylab="# Visitantes")
abline(v=2020,lwd=2, col='red');
# Adding line at July 2021
abline(v = as.numeric(as.Date('2021-07-01')), lwd = 2, col = 'blue')
# Adding line at July 2021
abline(v = as.numeric(as.Date('2021-07')), lwd = 2, col = 'blue')
# Adding line at July 2021
abline(v = as.numeric(('2021-07')), lwd = 2, col = 'blue')
# Adding line at July 2021
abline(v = as.numeric(('2021')), lwd = 2, col = 'blue')
# Adding line at July 2021
abline(v = as.numeric(('2021.07')), lwd = 2, col = 'blue')
# Adding line at July 2021
abline(v = as.numeric(('2021.12')), lwd = 2, col = 'blue')
runApp()
runApp()
runApp('D:/bedu/Final2023R/prototype-day')
runApp('D:/bedu/Final2023R/prototype-day')
runApp('D:/bedu/Final2023R/prototype-day')
runApp('D:/bedu/Final2023R/prototype-day')
runApp('D:/bedu/Final2023R/prototype-day')
runApp('D:/bedu/Final2023R/prototype-day')
runApp('D:/bedu/Final2023R/prototype-day')
